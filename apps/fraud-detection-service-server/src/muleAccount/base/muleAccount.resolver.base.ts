/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MuleAccount } from "./MuleAccount";
import { MuleAccountCountArgs } from "./MuleAccountCountArgs";
import { MuleAccountFindManyArgs } from "./MuleAccountFindManyArgs";
import { MuleAccountFindUniqueArgs } from "./MuleAccountFindUniqueArgs";
import { CreateMuleAccountArgs } from "./CreateMuleAccountArgs";
import { UpdateMuleAccountArgs } from "./UpdateMuleAccountArgs";
import { DeleteMuleAccountArgs } from "./DeleteMuleAccountArgs";
import { User } from "../../user/base/User";
import { MuleAccountService } from "../muleAccount.service";
@graphql.Resolver(() => MuleAccount)
export class MuleAccountResolverBase {
  constructor(protected readonly service: MuleAccountService) {}

  async _muleAccountsMeta(
    @graphql.Args() args: MuleAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MuleAccount])
  async muleAccounts(
    @graphql.Args() args: MuleAccountFindManyArgs
  ): Promise<MuleAccount[]> {
    return this.service.muleAccounts(args);
  }

  @graphql.Query(() => MuleAccount, { nullable: true })
  async muleAccount(
    @graphql.Args() args: MuleAccountFindUniqueArgs
  ): Promise<MuleAccount | null> {
    const result = await this.service.muleAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MuleAccount)
  async createMuleAccount(
    @graphql.Args() args: CreateMuleAccountArgs
  ): Promise<MuleAccount> {
    return await this.service.createMuleAccount({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => MuleAccount)
  async updateMuleAccount(
    @graphql.Args() args: UpdateMuleAccountArgs
  ): Promise<MuleAccount | null> {
    try {
      return await this.service.updateMuleAccount({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MuleAccount)
  async deleteMuleAccount(
    @graphql.Args() args: DeleteMuleAccountArgs
  ): Promise<MuleAccount | null> {
    try {
      return await this.service.deleteMuleAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: MuleAccount): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async GetMuleAccounts(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetMuleAccounts(args);
  }
}
