/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MuleAccount as PrismaMuleAccount,
  User as PrismaUser,
} from "@prisma/client";

export class MuleAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MuleAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.muleAccount.count(args);
  }

  async muleAccounts<T extends Prisma.MuleAccountFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MuleAccountFindManyArgs>
  ): Promise<PrismaMuleAccount[]> {
    return this.prisma.muleAccount.findMany<Prisma.MuleAccountFindManyArgs>(
      args
    );
  }
  async muleAccount<T extends Prisma.MuleAccountFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MuleAccountFindUniqueArgs>
  ): Promise<PrismaMuleAccount | null> {
    return this.prisma.muleAccount.findUnique(args);
  }
  async createMuleAccount<T extends Prisma.MuleAccountCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MuleAccountCreateArgs>
  ): Promise<PrismaMuleAccount> {
    return this.prisma.muleAccount.create<T>(args);
  }
  async updateMuleAccount<T extends Prisma.MuleAccountUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MuleAccountUpdateArgs>
  ): Promise<PrismaMuleAccount> {
    return this.prisma.muleAccount.update<T>(args);
  }
  async deleteMuleAccount<T extends Prisma.MuleAccountDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MuleAccountDeleteArgs>
  ): Promise<PrismaMuleAccount> {
    return this.prisma.muleAccount.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.muleAccount
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async GetMuleAccounts(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
