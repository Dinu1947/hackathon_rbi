/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MuleAccountService } from "../muleAccount.service";
import { MuleAccountCreateInput } from "./MuleAccountCreateInput";
import { MuleAccount } from "./MuleAccount";
import { MuleAccountFindManyArgs } from "./MuleAccountFindManyArgs";
import { MuleAccountWhereUniqueInput } from "./MuleAccountWhereUniqueInput";
import { MuleAccountUpdateInput } from "./MuleAccountUpdateInput";

export class MuleAccountControllerBase {
  constructor(protected readonly service: MuleAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MuleAccount })
  async createMuleAccount(
    @common.Body() data: MuleAccountCreateInput
  ): Promise<MuleAccount> {
    return await this.service.createMuleAccount({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        accountId: true,
        createdAt: true,
        flags: true,
        id: true,
        isMule: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MuleAccount] })
  @ApiNestedQuery(MuleAccountFindManyArgs)
  async muleAccounts(@common.Req() request: Request): Promise<MuleAccount[]> {
    const args = plainToClass(MuleAccountFindManyArgs, request.query);
    return this.service.muleAccounts({
      ...args,
      select: {
        accountId: true,
        createdAt: true,
        flags: true,
        id: true,
        isMule: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MuleAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async muleAccount(
    @common.Param() params: MuleAccountWhereUniqueInput
  ): Promise<MuleAccount | null> {
    const result = await this.service.muleAccount({
      where: params,
      select: {
        accountId: true,
        createdAt: true,
        flags: true,
        id: true,
        isMule: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MuleAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMuleAccount(
    @common.Param() params: MuleAccountWhereUniqueInput,
    @common.Body() data: MuleAccountUpdateInput
  ): Promise<MuleAccount | null> {
    try {
      return await this.service.updateMuleAccount({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          accountId: true,
          createdAt: true,
          flags: true,
          id: true,
          isMule: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MuleAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMuleAccount(
    @common.Param() params: MuleAccountWhereUniqueInput
  ): Promise<MuleAccount | null> {
    try {
      return await this.service.deleteMuleAccount({
        where: params,
        select: {
          accountId: true,
          createdAt: true,
          flags: true,
          id: true,
          isMule: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/get-mule-accounts")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetMuleAccounts(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetMuleAccounts(body);
  }
}
